////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// WindowManager.cs
//
// This file is responsible for managing the windows in the application.
// Copyright (C) 2024 noahsub
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMPORTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using Avalonia.Controls;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NAMESPACE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace Inferyn.Managers;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// WINDOW MANAGER CLASS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// <summary>
/// Manages the windows in the application.
/// </summary>
public static class WindowManager
{
    /// <summary>
    /// The list of currently open windows in the application.
    /// </summary>
    private static List<Window> Windows { get; } = [];

    /// <summary>
    /// Adds a window to the list of open windows.
    /// </summary>
    /// <param name="window">The window to add.</param>
    public static void AddWindow(Window window)
    {
        Windows.Add(window);
    }

    /// <summary>
    /// Removes a window from the list of open windows.
    /// </summary>
    /// <param name="window">The window to remove.</param>
    public static void RemoveWindow(Window window)
    {
        Windows.Remove(window);
    }
}
